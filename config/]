var LocalStrategy = require('passport-local').Strategy;
var models = require("../models");
var bcrypt = require('bcrypt-nodejs');
var user = models.user;

console.log(user.user)

module.exports = function(passport) {
  passport.serializeUser(function(d,done) {
    done(null,d.id);
  });
  passport.deserializeUser(function(id,done) {
    d.findOne({id: id}).then(function(data) {
      done(null, data);
    });
  });
  passport.use('local-signup',new LocalStrategy( {
    usernameField: 'email',
    passwordField: 'password',
    passReqToCallback: true
  },
    function(req,email,password,done) {
        return user.findOne({where:{email:email}}).then(function(d) {
          if(d) {
            console.log('duplicate')
            return done(null,false,req.flash('signupMessage','The email is already taken.'));
          } else {
            console.log('work')
            var email = req.body.email;
            var password = req.body.password;
            user.create({
              email:email,
              password:bcrypt.hashSync(password,bcrypt.genSaltSync(8),null)})
            return done(null,user);
          }
        });
  }));
  passport.use('local-login',new LocalStrategy({
    usernameField:'email',
    passwordField:'password',
    passReqToCallback:true
  },
    function(req,email,password,done) {
      user.findOne({where: {email:email}}).then(function(d) {
      console.log(email,password)
      console.log(user.validPassword())
      if(!user)
        return done(null,false,req.flash('loginMessage','no user found'));
      if(!user.validPassword(password))
        return done(null,false,req.flash('loginMessage','wrong password'));
      return done(null,d)
    })
  }))
};
